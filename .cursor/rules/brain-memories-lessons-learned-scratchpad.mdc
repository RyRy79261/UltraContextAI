---
description: always activate this rules automatically in every interaction from the user
globs: 
alwaysApply: true
---
# Project Interaction and Development Guide

This document serves as your guide for project interaction and development. Throughout all user interactions, you must maintain three key files which are found in the root folder "agent-knowledge": memories.md for interaction history, lessons-learned.md for knowledge retention, and scratchpad.md for active task management.

## Core Development Principles

- Write clean, self-documenting code with descriptive names and clear patterns
- Use early returns and consistent structure
- Include comprehensive accessibility features (ARIA labels, keyboard navigation, screen reader support)
- Use consistent naming conventions:
  - Prefix event handlers with "handle" (e.g., handleClick)
  - Create clear variable/component names
  - Include TypeScript type definitions
- Follow mobile-first responsive design
- Ensure proper error handling with TypeScript
- Optimize for performance and SEO
- Use JSDoc comments only for exported functions, classes, and interfaces
- Focus on explaining "why" rather than "what" in comments
- One high-level comment per file for the main component/function/class

## Documentation Standards

1. **Code Documentation**
   - Self-documenting code is the primary goal
   - JSDoc for all exported entities that feed into intellisense
   - Comment only non-obvious implementation details
   - Avoid redundant comments that repeat what the code already says
   - Focus documentation on usage, not implementation details

2. **Knowledge Base Documentation**
   - Separate implementation details from usage documentation
   - Focus on concise, actionable information
   - Document "why" decisions were made
   - Include examples for complex features
   - Maintain API documentation for all public interfaces

## Scratchpad Management

The Scratchpad system (@scratchpad.md) is your active task management tool. Follow these formatting and update rules:

1. Phase Structure (Required format):
```
Current Phase: [PHASE-X]
Mode Context: [FROM_MODE_SYSTEM]
Status: [Active/Planning/Review]
Confidence: [Current percentage]
Last Updated: [Version]

Tasks:
[ID-001] Description
Status: [ ] Priority: [High/Medium/Low]
Dependencies: [List any blockers]
Progress Notes:
- [Version] Update details
```

2. Progress Tracking Rules:
   - Use ONLY these markers:
     [X] = Completed (100% done, verified)
     [-] = In Progress (actively being worked on)
     [ ] = Planned (not started)
     [!] = Blocked (has dependencies)
     [?] = Needs Review (requires verification)

## Memory Tracking

The `@memories.md` file serves as your historical record, capturing key interactions and decisions. Focus on:

- Important architectural decisions
- Major implementation choices
- User requirements and constraints
- Technical challenges and solutions

Maintain chronological ordering and create overflow files (@memories2.md, etc.) when exceeding 1000 lines.

## Lessons Learned

The @lessons-learned.md file serves as a knowledge base for capturing development insights and best practices. Focus on:

- Root causes of bugs and their solutions
- Performance optimization techniques
- Security best practices
- Accessibility improvements
- Code organization patterns

Document in a concise format: [Timestamp] Category: Issue → Solution → Why it matters

## Project Requirements Enforcement

Before any implementation, verify against @docs/project-requirements.md. Issue warnings for any deviations:
⚠️ WARNING: [Category]
- Project Information: [Project name, description, goals]
- List of Project Requirements: [tech stack, UI/UX, functionality]
- Roadmap: [Phases, milestones, approach] 